import time, sys, string, math
import itertools as it
from general import *

#Euler problems

def is_palindrome(string):
    return string == string[::-1]

def problem1(): #Multiples of 3 and 5
    sum = 0
    for i in range(1,1000):
        if (i % 3 == 0 or i % 5 == 0):
            sum += i
    return sum

def problem2(): #Even Fibonacci numbers
    i = filter(lambda x: x % 2 == 0, list(fib(4000000)))
    return sum(i)

def problem3(): #Largest prime factor
    return prime_factors(600851475143)

def problem4(): #Largest palindrome product
    max = 1000
    numbers_list = range(100, 1000)
    for j in numbers_list:
        for k in numbers_list:
            if (j * k > max) and (is_palindrome(str(j * k))):
                max = j * k
    return max
                    
def problem5(): #Smallest multiple
    n = 2520
    while True:
        if divisible_by_list(n, range(1,21)):
            break
        n += 2520
    return n

def problem6():
    numbers = range(1,101)
    return (sum(numbers) ** 2) - sum([i ** 2 for i in numbers]) 

def problem7():
    return bad_primes_lister(10001)[10000]

def problem8():
    number = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'
    maximum = 0
    for i in xrange(0,1000-13):
        n = number[i:i+13]
        m = 1
        for x in n:
            m *= int(x)
        if m > maximum:
            maximum = m
    return maximum

def problem9():
    for a in xrange(1,1000,1):
        for b in xrange(1,1000 - a,1):
            c = 1000 - a - b
            if c ** 2 == (a ** 2) + (b ** 2):
                return c*b*a
    return 0

def problem10(): #prime summation
    return sum(sieve_of_eratosthenes(2000000))

def problem11(): #largest product in a grid
    return "fuck this"

def problem12(n): #Highly divisible triangular number
    n = 1
    lnum, rnum = num_divisors(n), num_divisors(n+1)
    while lnum * rnum < 500:
        n += 1
        lnum, rnum = rnum, num_divisors(n+1)
    return n
#index = problem12(500)
#print (index * (index + 1)) / 2

def problem13():
    #numbers = big array of numbers
    return 5537376230

def problem14():
    def collantz(n):
        steps = 1
        while n > 1:
            if n % 2 == 0:
                n /= 2
            else:
                n = (n * 3) + 1
            steps += 1
        return steps
    max, n = 1, 1
    for i in xrange(1000000):
        if collantz(i) > max:
            n, max = i, collantz(i)
    return n

def problem15():
    return math.factorial(2 * 20) // (math.factorial(20) ** 2)

def problem16():
    n = 2 ** 1000
    return sum(get_digits(n))

def problem17():
    return "Fuck it"

def problem18():
    return

def problem19():
    sundays_on_first = 0
    
    year = 1900
    
    normal_year = [31,28,31,30,31,30,31,31,30,31,30,31]
    leap_year = [31,29,31,30,31,30,31,31,30,31,30,31]
    day = 0
    while (year != 2001):
        if (year % 4 == 0 and year % 400 != 0):
            for month in leap_year:
                day = (day + month) % 7
    
    return sundays_on_first

def problem20():
    return sum ([int(z) for z in str(math.factorial(100))])

def problem21():
    return

def problem22():
    return

def problem23():
    return

def problem24():
    return

def problem25():
    return

def problem26():
    return

def problem27():
    return

def problem28():
    return

def problem29():
    return

def problem30():
    return

def problem31():
    return

def problem32():
    return

def problem33():
    return

def problem34():
    return

def problem35():
    return

def problem36():
    return

def problem37():
    return

def problem38():
    return

def problem39():
    return

def problem40():
    return

def problem41():
    return

def problem42():
    return

def problem43():
    return

def problem44():
    return

def problem45():
    return

def problem46():
    return

def problem47():
    return

def problem48():
    return

def problem49():
    return

def problem50():
    return
